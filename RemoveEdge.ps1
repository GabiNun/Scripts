Stop-Process -Name msedge,MicrosoftEdgeUpdate -Force -ErrorAction SilentlyContinue; $u=[Security.Principal.WindowsIdentity]::GetCurrent().Name; try { Get-ChildItem C:\ -Recurse -Force -ErrorAction SilentlyContinue | Where-Object { $_.Name -like '*Edge*' -and $_.FullName -notlike 'C:\Windows\WinSxS\*' } | ForEach-Object { $p=$_.FullName; if (Test-Path $p) { if ($_.PSIsContainer) { takeown /f "$p" /r /d Y | Out-Null; icacls "$p" /grant "${u}:(F)" /t /c | Out-Null } else { takeown /f "$p" | Out-Null; icacls "$p" /grant "${u}:(F)" | Out-Null }; Remove-Item "$p" -Recurse -Force -ErrorAction SilentlyContinue } } } catch {}
Stop-Process -Name msedge,MicrosoftEdgeUpdate -Force -ErrorAction SilentlyContinue; $u=[Security.Principal.WindowsIdentity]::GetCurrent().Name; try { Get-ChildItem C:\ -Recurse -Force -ErrorAction SilentlyContinue | Where-Object { $_.Name -like '*Edge*' } | Where-Object { $_.FullName -notmatch '(?i)\\windows\\winsxs\\' } | ForEach-Object { $p=$_.FullName; if (Test-Path $p) { if ($_.PSIsContainer) { takeown /f "$p" /r /d Y | Out-Null; icacls "$p" /grant "${u}:(F)" /t /c | Out-Null } else { takeown /f "$p" | Out-Null; icacls "$p" /grant "${u}:(F)" | Out-Null }; Remove-Item "$p" -Recurse -Force -ErrorAction SilentlyContinue } } } catch {}
$u=[Security.Principal.WindowsIdentity]::GetCurrent().Name;'HKLM:','HKCU:'|%{Get-ChildItem $_ -Recurse -EA 0|?{$_.PSChildName -like '*Edge*'}|%{try{$k=$_.PSPath;$acl=Get-Acl $k -EA 0;$acl.SetOwner([Security.Principal.NTAccount] $u);Set-Acl $k $acl -EA 0;$acl.AddAccessRule((New-Object Security.AccessControl.RegistryAccessRule($u,'FullControl','Allow')));Set-Acl $k $acl -EA 0;Remove-Item $k -Recurse -Force -EA 0}catch{}}} *> $null
